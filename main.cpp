#include <iostream>
#include "autogenerated.gproto-classes/FullName.pb.h"
#include "autogenerated.gproto-classes/Student.pb.h"
#include "autogenerated.gproto-classes/StudentsGroup.pb.h"

/*
 * Установить библиотеку protobuf.
 * С помощью компилятора protobuf в отдельном пространстве имен сгенерировать классы
 *
 * FullName с полями имя, фамилия, отчество (отчество опционально).
 * Student с полями полное имя, массив оценок, средний балл.
 * StudentsGroup с полем массив студентов.
 */

/*
 *  Этот кусок дз я к сроку не успел, но обязательно сделаю.
 *
 * Создать класс StudentsGroup, который реализует интерфейсы:
class IRepository {
    virtual void Open() = 0; // бинарная десериализация в файл
    virtual void Save() = 0; // бинарная сериализация в файл
};


class IMethods {
    virtual double GetAverageScore(const FullName& name) = 0;
    virtual string GetAllInfo(const FullName& name) = 0;
    virtual string GetAllInfo() = 0;
};
 * */

class IRepository {
    virtual void Open() = 0; // бинарная десериализация в файл
    virtual void Save() = 0; // бинарная сериализация в файл
};

namespace task3 {
class StudentsGroup {
    samplenamespace::studentgroup::StudentsGroup  group;
public:
    StudentsGroup(samplenamespace::studentgroup::StudentsGroup & group1)
    : group{group1} {}


};
}

int main() {
    samplenamespace::fname::FullName * Me = new(samplenamespace::fname::FullName);
    Me->set_family("Artemev");
    Me->set_name("Oleg");
    Me->set_patronymic("Konstantinovich");
    samplenamespace::student::Student * geekbrainsStudent = new(samplenamespace::student::Student);
    geekbrainsStudent->set_allocated_name(Me);
    geekbrainsStudent->add_marks(4);
    geekbrainsStudent->add_marks(4);
    geekbrainsStudent->add_marks(5);
    int counter{0};int summ=0;
    for(auto mark=geekbrainsStudent->marks().begin();mark<geekbrainsStudent->marks().end();++mark) {
        std::cout << *mark << std::endl;
        summ+=*mark;
        ++counter;
    }
    geekbrainsStudent->set_average_mark((float )summ/counter);
    std::cout << geekbrainsStudent->name().family() << " " << geekbrainsStudent->name().name() << " " <<
    geekbrainsStudent->average_mark() << std::endl;

    samplenamespace::studentgroup::StudentsGroup * studentsGroup = new(samplenamespace::studentgroup::StudentsGroup);
    // studentsGroup->add_students(); этот метод сгенерирован не принимающим параметров.
    // как предполагается заполнять группу студентов - писать собственный метод изменяя автосгенерённый исходник?
    // studentsGroup->students().at(0)=geekbrainsStudent; // такой вариант не срабатывает - требует const где-то.
    studentsGroup->add_students()->CopyFrom(*geekbrainsStudent);
    studentsGroup->add_students()->CopyFrom(*geekbrainsStudent);
    geekbrainsStudent->clear_marks();
    geekbrainsStudent->clear_average_mark();
    geekbrainsStudent->clear_name();
    delete(geekbrainsStudent);
    Me->clear_family();
    Me->clear_name();
    Me->clear_patronymic();
    Me->Clear();
    // delete() below give protobuf error
    delete(Me);
    /* Текст ошибки, если чистить за собой память:
     * [libprotobuf FATAL /home/olli/CLionProjects/trickyCPP/homework7/autogenerated.gproto-classes/FullName.pb.cc:135]
     * CHECK failed: GetArenaForAllocation() == nullptr
     * Всего-то - создал объекты и попытался удалить память после использования.
     * Какой-то он глючный последний протобуф собранный конаном..
     * */
    return 0;
}
