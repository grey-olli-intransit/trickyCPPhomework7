// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Student.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Student_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Student_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "FullName.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Student_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Student_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Student_2eproto;
namespace samplenamespace {
namespace student {
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
}  // namespace student
}  // namespace samplenamespace
PROTOBUF_NAMESPACE_OPEN
template<> ::samplenamespace::student::Student* Arena::CreateMaybeMessage<::samplenamespace::student::Student>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace samplenamespace {
namespace student {

// ===================================================================

class Student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:samplenamespace.student.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  ~Student() override;
  explicit constexpr Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const final {
    return new Student();
  }

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "samplenamespace.student.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarksFieldNumber = 3,
    kNameFieldNumber = 1,
    kAverageMarkFieldNumber = 2,
  };
  // repeated int32 marks = 3;
  int marks_size() const;
  private:
  int _internal_marks_size() const;
  public:
  void clear_marks();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_marks() const;
  void _internal_add_marks(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_marks();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 marks(int index) const;
  void set_marks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_marks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      marks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_marks();

  // .samplenamespace.fname.FullName name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::samplenamespace::fname::FullName& name() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::samplenamespace::fname::FullName* release_name();
  ::samplenamespace::fname::FullName* mutable_name();
  void set_allocated_name(::samplenamespace::fname::FullName* name);
  private:
  const ::samplenamespace::fname::FullName& _internal_name() const;
  ::samplenamespace::fname::FullName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::samplenamespace::fname::FullName* name);
  ::samplenamespace::fname::FullName* unsafe_arena_release_name();

  // float average_mark = 2;
  void clear_average_mark();
  float average_mark() const;
  void set_average_mark(float value);
  private:
  float _internal_average_mark() const;
  void _internal_set_average_mark(float value);
  public:

  // @@protoc_insertion_point(class_scope:samplenamespace.student.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > marks_;
  mutable std::atomic<int> _marks_cached_byte_size_;
  ::samplenamespace::fname::FullName* name_;
  float average_mark_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Student_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Student

// .samplenamespace.fname.FullName name = 1;
inline bool Student::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool Student::has_name() const {
  return _internal_has_name();
}
inline const ::samplenamespace::fname::FullName& Student::_internal_name() const {
  const ::samplenamespace::fname::FullName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::samplenamespace::fname::FullName&>(
      ::samplenamespace::fname::_FullName_default_instance_);
}
inline const ::samplenamespace::fname::FullName& Student::name() const {
  // @@protoc_insertion_point(field_get:samplenamespace.student.Student.name)
  return _internal_name();
}
inline void Student::unsafe_arena_set_allocated_name(
    ::samplenamespace::fname::FullName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:samplenamespace.student.Student.name)
}
inline ::samplenamespace::fname::FullName* Student::release_name() {
  
  ::samplenamespace::fname::FullName* temp = name_;
  name_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::samplenamespace::fname::FullName* Student::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:samplenamespace.student.Student.name)
  
  ::samplenamespace::fname::FullName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::samplenamespace::fname::FullName* Student::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::samplenamespace::fname::FullName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::samplenamespace::fname::FullName* Student::mutable_name() {
  // @@protoc_insertion_point(field_mutable:samplenamespace.student.Student.name)
  return _internal_mutable_name();
}
inline void Student::set_allocated_name(::samplenamespace::fname::FullName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:samplenamespace.student.Student.name)
}

// float average_mark = 2;
inline void Student::clear_average_mark() {
  average_mark_ = 0;
}
inline float Student::_internal_average_mark() const {
  return average_mark_;
}
inline float Student::average_mark() const {
  // @@protoc_insertion_point(field_get:samplenamespace.student.Student.average_mark)
  return _internal_average_mark();
}
inline void Student::_internal_set_average_mark(float value) {
  
  average_mark_ = value;
}
inline void Student::set_average_mark(float value) {
  _internal_set_average_mark(value);
  // @@protoc_insertion_point(field_set:samplenamespace.student.Student.average_mark)
}

// repeated int32 marks = 3;
inline int Student::_internal_marks_size() const {
  return marks_.size();
}
inline int Student::marks_size() const {
  return _internal_marks_size();
}
inline void Student::clear_marks() {
  marks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::_internal_marks(int index) const {
  return marks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::marks(int index) const {
  // @@protoc_insertion_point(field_get:samplenamespace.student.Student.marks)
  return _internal_marks(index);
}
inline void Student::set_marks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  marks_.Set(index, value);
  // @@protoc_insertion_point(field_set:samplenamespace.student.Student.marks)
}
inline void Student::_internal_add_marks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  marks_.Add(value);
}
inline void Student::add_marks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_marks(value);
  // @@protoc_insertion_point(field_add:samplenamespace.student.Student.marks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Student::_internal_marks() const {
  return marks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Student::marks() const {
  // @@protoc_insertion_point(field_list:samplenamespace.student.Student.marks)
  return _internal_marks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Student::_internal_mutable_marks() {
  return &marks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Student::mutable_marks() {
  // @@protoc_insertion_point(field_mutable_list:samplenamespace.student.Student.marks)
  return _internal_mutable_marks();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace student
}  // namespace samplenamespace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Student_2eproto
